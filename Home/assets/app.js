angular.module("app",["ngRoute"]),angular.module("app").controller("MainCtrl",["$scope",function(e){}]),angular.module("app").controller("ResidenceCtrl",["$scope","ResidenceSvc",function(e,i){e.getTraffic=function(){i.getTraffic().success(function(e){for(var i=e.data,o=[{period:"아주불만족",value:0},{period:"불만족",value:0},{period:"보통",value:0},{period:"만족",value:0},{period:"매우만족",value:0}],a=0;a<i.length;++a)"1"==i[a]._id.value?o[0].value=i[a].count:"2"==i[a]._id.value?o[1].value=i[a].count:"3"==i[a]._id.value?o[2].value=i[a].count:"4"==i[a]._id.value?o[3].value=i[a].count:"5"==i[a]._id.value&&(o[4].value=i[a].count);Morris.Bar({element:"morris-traffic-chart",data:o,xkey:"period",ykeys:["value"],labels:["대중교통 만족도"],pointSize:2,hideHover:"auto",resize:!0})})},e.getCommercial=function(){i.getCommercial().success(function(e){for(var i=e.data,o=[{period:"아주불만족",value:0},{period:"불만족",value:0},{period:"보통",value:0},{period:"만족",value:0},{period:"매우만족",value:0}],a=0;a<i.length;++a)"1"==i[a]._id.value?o[0].value=i[a].count:"2"==i[a]._id.value?o[1].value=i[a].count:"3"==i[a]._id.value?o[2].value=i[a].count:"4"==i[a]._id.value?o[3].value=i[a].count:"5"==i[a]._id.value&&(o[4].value=i[a].count);Morris.Bar({element:"morris-commercial-chart",data:o,xkey:"period",ykeys:["value"],labels:["대중교통 만족도"],pointSize:2,hideHover:"auto",resize:!0})})},e.getLeisure=function(){i.getLeisure().success(function(e){for(var i=e.data,o=[{period:"아주불만족",value:0},{period:"불만족",value:0},{period:"보통",value:0},{period:"만족",value:0},{period:"매우만족",value:0}],a=0;a<i.length;++a)"1"==i[a]._id.value?o[0].value=i[a].count:"2"==i[a]._id.value?o[1].value=i[a].count:"3"==i[a]._id.value?o[2].value=i[a].count:"4"==i[a]._id.value?o[3].value=i[a].count:"5"==i[a]._id.value&&(o[4].value=i[a].count);Morris.Bar({element:"morris-leisure-chart",data:o,xkey:"period",ykeys:["value"],labels:["대중교통 만족도"],pointSize:2,hideHover:"auto",resize:!0})})},e.getGreen=function(){i.getGreen().success(function(e){for(var i=e.data,o=[{period:"아주불만족",value:0},{period:"불만족",value:0},{period:"보통",value:0},{period:"만족",value:0},{period:"매우만족",value:0}],a=0;a<i.length;++a)"1"==i[a]._id.value?o[0].value=i[a].count:"2"==i[a]._id.value?o[1].value=i[a].count:"3"==i[a]._id.value?o[2].value=i[a].count:"4"==i[a]._id.value?o[3].value=i[a].count:"5"==i[a]._id.value&&(o[4].value=i[a].count);Morris.Bar({element:"morris-green-chart",data:o,xkey:"period",ykeys:["value"],labels:["녹지 만족도"],pointSize:2,hideHover:"auto",resize:!0})})},e.getArea=function(){i.getArea().success(function(e){for(var i=e.data,o=[{period:"49.5m2이하",value:0},{period:"49.58~59.4m2",value:0},{period:"59.5~79.32m2",value:0},{period:"79.33~105.78m2",value:0},{period:"105.79m2~",value:0}],a=0;a<i.length;++a)"1"==i[a]._id.value?o[0].value=i[a].count:"2"==i[a]._id.value?o[1].value=i[a].count:"3"==i[a]._id.value?o[2].value=i[a].count:"4"==i[a]._id.value?o[3].value=i[a].count:"5"==i[a]._id.value&&(o[4].value=i[a].count);Morris.Bar({element:"morris-area-chart",data:o,xkey:"period",ykeys:["value"],labels:["거주면적"],pointSize:2,hideHover:"auto",resize:!0})})},e.getTraffic(),e.getCommercial(),e.getLeisure(),e.getGreen(),e.getArea()}]),angular.module("app").service("ResidenceSvc",["$http",function(e){this.getTraffic=function(){return e.post("/api/lol/admin/getResicence/traffic")},this.getCommercial=function(){return e.post("/api/lol/admin/getResicence/commercial")},this.getLeisure=function(){return e.post("/api/lol/admin/getResicence/leisure")},this.getGreen=function(){return e.post("/api/lol/admin/getResicence/green")},this.getArea=function(){return e.post("/api/lol/admin/getResicence/area")}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(e,i){e.when("/",{templateUrl:"templates/admin.html"}).when("/social",{templateUrl:"templates/social.html"}).when("/residence",{templateUrl:"templates/residence.html"}),i.html5Mode(!1),i.hashPrefix("!")}]),angular.module("app").controller("SocialCtrl",["$scope","SocialSvc",function(e,i){e.getSex=function(){i.getSex().success(function(e){var i=e.data;console.log("sex data:"+i[0]._id.sex);for(var o=[],a=0;a<i.length;++a)if(1==i[a]._id.sex){var t={label:"여자",data:i[a].count};o.push(t)}else{var r={label:"남자",data:i[a].count};o.push(r)}$.plot($("#flot-pie-chart-sex"),o,{series:{pie:{show:!0}},grid:{hoverable:!0},tooltip:!0,tooltipOpts:{content:"%p.0%, %s",shifts:{x:20,y:0},defaultTheme:!1}})})},e.getDrive=function(){i.getDrive().success(function(e){var i=e.data;console.log("drive data:"+i[0]._id.drive_license);for(var o=[{label:"운전면허 소지",data:0},{label:"운전면허 미소지",data:0}],a=0;a<i.length;++a)1==i[a]._id.drive_license?o[0].data=i[a].count:o[1].data=i[a].count;$.plot($("#flot-pie-chart-drive"),o,{series:{pie:{show:!0}},grid:{hoverable:!0},tooltip:!0,tooltipOpts:{content:"%p.0%, %s",shifts:{x:20,y:0},defaultTheme:!1}})})},e.getAge=function(){i.getAge().success(function(e){for(var i=e.data,o=[{period:"0-19",age:0},{period:"20-29",age:0},{period:"30-39",age:0},{period:"40-49",age:0},{period:"50-59",age:0},{period:"60-",age:0}],a=0;a<i.length;++a)"range 0-19"==i[a]._id?o[0].age=i[a].count:"range 20-29"==i[a]._id?o[1].age=i[a].count:"range 30-39"==i[a]._id?o[2].age=i[a].count:"range 40-49"==i[a]._id?o[3].age=i[a].count:"range 50-59"==i[a]._id?o[4].age=i[a].count:o[5].age=i[a].count;Morris.Bar({element:"morris-age-chart",data:o,xkey:"period",ykeys:["age"],labels:["연령대"],pointSize:2,hideHover:"auto",resize:!0})})},e.getIncome=function(){i.getIncome().success(function(e){for(var i=e.data,o=[{period:"~1백만",income:0},{period:"1백~2백만",income:0},{period:"2백-3백만",income:0},{period:"3백-5백만",income:0},{period:"5백-1천만",income:0},{period:"1천만이상",income:0}],a=0;a<i.length;++a)"range 0-100"==i[a]._id?o[0].income=i[a].count:"range 100-200"==i[a]._id?o[1].income=i[a].count:"range 200-300"==i[a]._id?o[2].income=i[a].count:"range 300-500"==i[a]._id?o[3].income=i[a].count:"range 500-1000"==i[a]._id?o[4].income=i[a].count:o[5].income=i[a].count;Morris.Bar({element:"morris-income-chart",data:o,xkey:"period",ykeys:["income"],labels:["수입"],pointSize:2,hideHover:"auto",resize:!0})})},e.getSex(),e.getDrive(),e.getAge(),e.getIncome()}]),angular.module("app").service("SocialSvc",["$http",function(e){this.getSex=function(){return e.post("/api/lol/admin/getSocial/sex")},this.getDrive=function(){return e.post("/api/lol/admin/getSocial/drive")},this.getAge=function(){return e.post("/api/lol/admin/getSocial/age")},this.getIncome=function(){return e.post("/api/lol/admin/getSocial/income")}}]),angular.module("app").controller("UserCtrl",["$scope","UserSvc",function(e,i){function o(i){for(var o=0;o<e.users.length;++o)console.log("user:"+e.users[o]._id),i==e.users[o]._id&&(e.users[o].name=e.name,e.users[o].password=e.password)}function a(i){console.log("delete userId:"+i);for(var o=0;o<e.users.length;++o)if(console.log("user:"+e.users[o]._id),i==e.users[o]._id)return console.log("deleted"),void e.users.splice(o,1)}e.edit=!1,e.deleteId,i.fetch().success(function(i){e.users=i}),e.saveUser=function(){e.edit?i.modify({_id:e.id,name:e.name,password:e.password}).success(function(i){o(e.id),e.id=null,e.name=null,e.password=null,e.edit=!1}):i.create({_id:e.id,name:e.name,password:e.password}).success(function(i){e.users.unshift(i),e.id=null,e.name=null,e.password=null})},e.editUser=function(i){e.edit=!0,e.id=i._id,e.name=i.name,e.password=i.password},e.deleteConfirm=function(i){console.log("userId:"+i._id),e.deleteId=i._id,$("#dialogDelete").modal("show")},e.deleteUser=function(){$("#dialogDelete").modal("hide"),i.remove({_id:e.deleteId}).success(function(i){a(e.deleteId)})}}]),angular.module("app").service("UserSvc",["$http",function(e){this.fetch=function(){return e.post("/api/user/getList")},this.create=function(i){return e.post("/api/user/add",i)},this.modify=function(i){return e.post("/api/user/modify",i)},this.remove=function(i){return e.post("/api/user/remove",i)}}]);
//# sourceMappingURL=data:application/json;base64,